{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"beatstoch","text":"<p>BPM-aware stochastic drum MIDI generator - Create dynamic, probabilistic drum patterns that adapt to any song's BPM.</p> <p> </p>"},{"location":"#overview","title":"Overview","text":"<p>beatstoch is a powerful tool for generating drum patterns that intelligently adapt to any song's BPM. Whether you're a music producer looking for inspiration or a developer wanting to integrate dynamic rhythm generation into your application, beatstoch provides both a command-line interface and Python library.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83c\udfb5 BPM Database Integration: Automatically looks up song BPM from online databases</li> <li>\ud83c\udfb6 Multiple Styles: House, breaks, and generic drum patterns</li> <li>\ud83d\udd00 Stochastic Generation: Creates varied, probabilistic drum patterns</li> <li>\ud83c\udfb9 MIDI Export: Generates standard MIDI files compatible with all DAWs</li> <li>\u26a1 CLI &amp; Library: Use as a command-line tool or Python library</li> <li>\ud83c\udf9b\ufe0f Customizable: Adjust swing, intensity, bars, and more</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#command-line","title":"Command Line","text":"<pre><code># Generate 8 bars of house drums for any song\nbeatstoch generate \"Billie Jean\" --artist \"Michael Jackson\"\n\n# Generate breaks pattern at specific BPM\nbeatstoch generate-bpm 128 --bars 16 --style breaks\n\n# See all options\nbeatstoch --help\n</code></pre>"},{"location":"#python-library","title":"Python Library","text":"<pre><code>from beatstoch import generate_from_song, generate_stochastic_pattern\n\n# Generate from song lookup\nmidi_file, bpm = generate_from_song(\n    \"1979\",\n    artist=\"Smashing Pumpkins\",\n    bars=8,\n    style=\"house\"\n)\n\n# Generate with explicit BPM\nmidi_file = generate_stochastic_pattern(\n    bpm=127,\n    bars=4,\n    style=\"breaks\",\n    swing=0.1\n)\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install beatstoch\n</code></pre>"},{"location":"#documentation-contents","title":"Documentation Contents","text":"<ul> <li>User Guide - Complete usage instructions and examples</li> <li>API Reference - Python library documentation</li> <li>Developer Guide - Contributing and development workflows</li> </ul>"},{"location":"#examples","title":"Examples","text":"<p>See the User Guide for comprehensive examples and detailed usage instructions.</p>"},{"location":"#license","title":"License","text":"<p>[Add your license information here]</p>"},{"location":"#support","title":"Support","text":"<ul> <li>\ud83d\udcd6 Documentation</li> <li>\ud83d\udc1b Issue Tracker</li> <li>\ud83d\udcac Discussions</li> </ul> <p>Generated drum patterns are for educational and creative purposes. Always respect music copyrights and licensing.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>Complete reference for the beatstoch Python library.</p>"},{"location":"api-reference/#main-functions","title":"Main Functions","text":""},{"location":"api-reference/#generate_from_song","title":"<code>generate_from_song()</code>","text":"<p>Generate a MIDI drum pattern by looking up a song's BPM from the database.</p> <pre><code>generate_from_song(\n    song_title: str,\n    artist: Optional[str] = None,\n    bars: int = 8,\n    style: str = \"house\",\n    steps_per_beat: int = 4,\n    swing: float = 0.10,\n    intensity: float = 0.9,\n    seed: Optional[int] = None,\n    fallback_bpm: Optional[float] = None,\n    verbose: bool = False,\n) -&gt; Tuple[mido.MidiFile, float]\n</code></pre> <p>Parameters: - <code>song_title</code> (str): Title of the song to look up - <code>artist</code> (str, optional): Artist name for improved BPM lookup accuracy - <code>bars</code> (int): Number of bars to generate (default: 8) - <code>style</code> (str): Drum pattern style - \"house\", \"breaks\", or \"generic\" (default: \"house\") - <code>steps_per_beat</code> (int): Time resolution (default: 4, i.e., 16<sup>th</sup> notes) - <code>swing</code> (float): Swing amount 0.0-1.0 (default: 0.10) - <code>intensity</code> (float): Pattern density 0.0-1.0 (default: 0.9) - <code>seed</code> (int, optional): Random seed for reproducible patterns - <code>fallback_bpm</code> (float, optional): BPM to use if database lookup fails - <code>verbose</code> (bool): Enable verbose logging (default: False)</p> <p>Returns: - Tuple of (MIDI file object, detected BPM as float)</p> <p>Raises: - <code>RuntimeError</code>: If BPM lookup fails and no fallback BPM provided</p> <p>Example: <pre><code>from beatstoch import generate_from_song\n\nmidi_file, bpm = generate_from_song(\n    \"1979\",\n    artist=\"Smashing Pumpkins\",\n    bars=16,\n    style=\"house\",\n    swing=0.12,\n    verbose=True\n)\n\nprint(f\"Generated {midi_file.length} seconds at {bpm} BPM\")\nmidi_file.save(\"drums.mid\")\n</code></pre></p>"},{"location":"api-reference/#generate_stochastic_pattern","title":"<code>generate_stochastic_pattern()</code>","text":"<p>Generate a MIDI drum pattern with explicit BPM (no database lookup).</p> <pre><code>generate_stochastic_pattern(\n    bpm: float,\n    bars: int = 4,\n    meter: Tuple[int, int] = (4, 4),\n    steps_per_beat: int = 4,\n    swing: float = 0.12,\n    intensity: float = 0.9,\n    seed: int = 42,\n    style: str = \"house\",\n) -&gt; mido.MidiFile\n</code></pre> <p>Parameters: - <code>bpm</code> (float): Target BPM for the pattern - <code>bars</code> (int): Number of bars to generate (default: 4) - <code>meter</code> (Tuple[int, int]): Time signature as (numerator, denominator) (default: (4, 4)) - <code>steps_per_beat</code> (int): Time resolution (default: 4, i.e., 16<sup>th</sup> notes) - <code>swing</code> (float): Swing amount 0.0-1.0 (default: 0.12) - <code>intensity</code> (float): Pattern density 0.0-1.0 (default: 0.9) - <code>seed</code> (int): Random seed for reproducible patterns (default: 42) - <code>style</code> (str): Drum pattern style - \"house\", \"breaks\", or \"generic\" (default: \"house\")</p> <p>Returns: - MIDI file object</p> <p>Example: <pre><code>from beatstoch import generate_stochastic_pattern\n\npattern = generate_stochastic_pattern(\n    bpm=128.0,\n    bars=8,\n    style=\"breaks\",\n    swing=0.08,\n    intensity=0.85,\n    seed=123\n)\n\npattern.save(\"breakbeat_pattern.mid\")\n</code></pre></p>"},{"location":"api-reference/#drum-styles","title":"Drum Styles","text":""},{"location":"api-reference/#house","title":"House","text":"<p>Characteristics: - Four-on-the-floor kick pattern - Steady hi-hat pattern with openings - Snare on beats 2 and 4 - Clean, repetitive structure</p> <p>Best for: House, techno, minimal techno</p>"},{"location":"api-reference/#breaks","title":"Breaks","text":"<p>Characteristics: - Complex kick patterns - Varied snare placement - Syncopated hi-hat patterns - Breakbeat-inspired rhythms</p> <p>Best for: Breakbeat, drum &amp; bass, hip-hop, experimental</p>"},{"location":"api-reference/#generic","title":"Generic","text":"<p>Characteristics: - Balanced patterns - Moderate complexity - Works across multiple genres - Good starting point for experimentation</p> <p>Best for: General use, customization, learning</p>"},{"location":"api-reference/#advanced-usage","title":"Advanced Usage","text":""},{"location":"api-reference/#custom-random-seeds","title":"Custom Random Seeds","text":"<pre><code>import time\n\n# Use current time for truly random patterns\ncurrent_time = int(time.time())\nmidi_file, bpm = generate_from_song(\"Song Title\", seed=current_time)\n\n# Use song title for consistent patterns per song\nsong_seed = hash(\"Song Title - Artist\") % (2**31)\nmidi_file, bpm = generate_from_song(\"Song Title\", artist=\"Artist\", seed=song_seed)\n</code></pre>"},{"location":"api-reference/#batch-generation","title":"Batch Generation","text":"<pre><code>from beatstoch import generate_stochastic_pattern\n\n# Generate multiple variations\nstyles = [\"house\", \"breaks\", \"generic\"]\nbpms = [120, 125, 130]\n\nfor style in styles:\n    for bpm in bpms:\n        pattern = generate_stochastic_pattern(\n            bpm=bpm,\n            bars=8,\n            style=style,\n            seed=42  # Consistent seed for comparison\n        )\n        pattern.save(f\"pattern_{bpm}_{style}.mid\")\n</code></pre>"},{"location":"api-reference/#integration-with-daws","title":"Integration with DAWs","text":"<pre><code>from beatstoch import generate_from_song\n\n# Generate pattern for current project BPM\ndef generate_drums_for_project(song_title, artist, project_bpm, bars=8):\n    \"\"\"Generate drums, using project BPM as fallback if lookup fails.\"\"\"\n    try:\n        midi_file, detected_bpm = generate_from_song(\n            song_title,\n            artist=artist,\n            bars=bars,\n            fallback_bpm=project_bpm\n        )\n        print(f\"Using detected BPM: {detected_bpm}\")\n        return midi_file, detected_bpm\n    except RuntimeError:\n        # Fallback to project BPM\n        midi_file = generate_stochastic_pattern(project_bpm, bars=bars)\n        return midi_file, project_bpm\n\n# Example usage in a DAW automation script\ndrums, bpm = generate_drums_for_project(\"My Song\", \"My Artist\", 128)\ndrums.save(\"project_drums.mid\")\n</code></pre>"},{"location":"api-reference/#data-types","title":"Data Types","text":""},{"location":"api-reference/#midi-file-object","title":"MIDI File Object","text":"<p>Returns standard <code>mido.MidiFile</code> objects that can be: - Saved to disk: <code>midi_file.save(\"filename.mid\")</code> - Played with MIDI players - Imported into DAWs - Modified with additional MIDI events</p>"},{"location":"api-reference/#bpm-values","title":"BPM Values","text":"<ul> <li>Returned as <code>float</code> for precision</li> <li>Typical range: 60-200 BPM</li> <li>Represents the detected or specified tempo</li> </ul>"},{"location":"api-reference/#error-handling","title":"Error Handling","text":""},{"location":"api-reference/#common-exceptions","title":"Common Exceptions","text":"<pre><code>from beatstoch import generate_from_song\nimport requests\n\ntry:\n    midi_file, bpm = generate_from_song(\"Song Title\", artist=\"Artist\")\nexcept RuntimeError as e:\n    print(f\"BPM lookup failed: {e}\")\n    # Use fallback BPM\n    fallback_bpm = 120\n    midi_file = generate_stochastic_pattern(fallback_bpm, bars=8)\nexcept requests.RequestException as e:\n    print(f\"Network error: {e}\")\n    # Handle network issues\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"api-reference/#network-issues","title":"Network Issues","text":"<p>The library makes HTTP requests to BPM databases. Handle network errors:</p> <pre><code>import requests\nfrom requests.adapters import HTTPAdapter\nfrom urllib3.util.retry import Retry\n\n# Configure retries for network requests\nretry_strategy = Retry(\n    total=3,\n    backoff_factor=1,\n    status_forcelist=[429, 500, 502, 503, 504],\n)\nadapter = HTTPAdapter(max_retries=retry_strategy)\nsession = requests.Session()\nsession.mount(\"http://\", adapter)\nsession.mount(\"https://\", adapter)\n</code></pre>"},{"location":"api-reference/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Memory Usage: MIDI files are generated in memory; large patterns may use significant RAM</li> <li>Generation Time: Complex patterns with high <code>steps_per_beat</code> take longer to generate</li> <li>Network Time: BPM lookups add latency (typically 1-3 seconds)</li> <li>File I/O: Saving large MIDI files to disk may take time</li> </ul>"},{"location":"api-reference/#thread-safety","title":"Thread Safety","text":"<p>The library is not thread-safe for random number generation when using default seeds. Use explicit seeds for concurrent generation:</p> <pre><code>import threading\nimport random\n\ndef generate_with_thread_id(bpm, thread_id):\n    # Use thread ID in seed for thread-safe generation\n    seed = hash((bpm, thread_id)) % (2**31)\n    return generate_stochastic_pattern(bpm, seed=seed)\n\n# Safe for concurrent use\nthreads = []\nfor i in range(10):\n    thread = threading.Thread(target=generate_with_thread_id, args=(128, i))\n    threads.append(thread)\n    thread.start()\n\nfor thread in threads:\n    thread.join()\n</code></pre>"},{"location":"developer-guide/","title":"Developer Guide","text":"<p>This guide covers development workflows, release processes, and project maintenance for the beatstoch project.</p>"},{"location":"developer-guide/#development-setup","title":"Development Setup","text":""},{"location":"developer-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9+ (tested on 3.9-3.14)</li> <li>uv package manager (recommended)</li> <li>Git</li> </ul>"},{"location":"developer-guide/#initial-setup","title":"Initial Setup","text":"<pre><code>git clone https://github.com/james-see/beatstoch.git\ncd beatstoch\nuv sync  # Install dependencies\n</code></pre>"},{"location":"developer-guide/#development-workflow","title":"Development Workflow","text":"<pre><code># Make your changes\n# ...\n\n# Run tests\nuv run python -m pytest\n\n# Test CLI functionality\nuv run beatstoch generate \"1979\" --artist \"Smashing Pumpkins\" --bars 2\n\n# Build package locally\nuv build\n</code></pre>"},{"location":"developer-guide/#release-process","title":"Release Process","text":""},{"location":"developer-guide/#version-management","title":"Version Management","text":"<p>The project uses semantic versioning (MAJOR.MINOR.PATCH).</p> <p>Update version in: - <code>pyproject.toml</code> (project.version) - <code>src/beatstoch/__init__.py</code> (if version is defined)</p>"},{"location":"developer-guide/#pre-release-checklist","title":"Pre-release Checklist","text":"<ul> <li> Update version numbers</li> <li> Update CHANGELOG.md with new features/fixes</li> <li> Run tests: <code>uv run python -m pytest</code></li> <li> Test CLI functionality</li> <li> Update documentation if needed</li> <li> Ensure all dependencies are properly pinned</li> </ul>"},{"location":"developer-guide/#github-release","title":"GitHub Release","text":""},{"location":"developer-guide/#automated-release-recommended","title":"Automated Release (Recommended)","text":"<p>The project includes GitHub Actions workflows that automatically create releases when tags are pushed.</p> <p>To create a release: <pre><code># Ensure you're on the main branch and up to date\ngit checkout main\ngit pull origin main\n\n# Create and push a version tag\nVERSION=\"1.0.0\"\ngit tag -a \"v${VERSION}\" -m \"Release version ${VERSION}\"\ngit push origin \"v${VERSION}\"\n</code></pre></p> <p>The GitHub Actions workflow will: 1. Build the package 2. Create a GitHub release 3. Upload distribution files as release assets</p>"},{"location":"developer-guide/#manual-release","title":"Manual Release","text":"<p>If automation fails, you can create releases manually:</p> <ol> <li>Go to GitHub Releases</li> <li>Click \"Create a new release\"</li> <li>Select the version tag you created</li> <li>Add release notes from CHANGELOG.md</li> <li>Upload built distribution files from <code>dist/</code> directory</li> </ol>"},{"location":"developer-guide/#pypi-release","title":"PyPI Release","text":""},{"location":"developer-guide/#automated-pypi-publishing","title":"Automated PyPI Publishing","text":"<p>The GitHub Actions workflow can automatically publish to PyPI when a release is created.</p> <p>Prerequisites: - PyPI account with the package name <code>beatstoch</code> - PyPI API token stored as <code>PYPI_API_TOKEN</code> secret in repository settings</p> <p>To enable automated PyPI publishing: 1. Go to repository Settings &gt; Secrets and variables &gt; Actions 2. Add <code>PYPI_API_TOKEN</code> with your PyPI API token value 3. The workflow will automatically publish to PyPI on tagged releases</p>"},{"location":"developer-guide/#manual-pypi-publishing","title":"Manual PyPI Publishing","text":"<p>If you prefer to publish manually or automation isn't set up:</p> <pre><code># Build distributions\nuv build\n\n# Upload to PyPI (requires API token)\nuv publish\n\n# Or using twine (if you have it installed)\ntwine upload dist/*\n</code></pre> <p>To get a PyPI API token: 1. Go to PyPI Account Settings 2. Create a new API token with upload permissions 3. Add it as <code>PYPI_API_TOKEN</code> in GitHub repository secrets</p>"},{"location":"developer-guide/#post-release-checklist","title":"Post-release Checklist","text":"<ul> <li> Verify package installs: <code>pip install beatstoch</code></li> <li> Test CLI: <code>beatstoch --help</code></li> <li> Verify GitHub release shows correct information</li> <li> Update any external references or documentation</li> </ul>"},{"location":"developer-guide/#project-structure","title":"Project Structure","text":"<pre><code>beatstoch/\n\u251c\u2500\u2500 src/beatstoch/          # Main package code\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 bpm.py             # BPM database integration\n\u2502   \u251c\u2500\u2500 generator.py       # MIDI generation logic\n\u2502   \u2514\u2500\u2500 cli.py             # Command-line interface\n\u251c\u2500\u2500 docs/                  # Documentation (GitHub Pages)\n\u251c\u2500\u2500 tests/                 # Test files\n\u251c\u2500\u2500 .github/workflows/     # GitHub Actions workflows\n\u251c\u2500\u2500 pyproject.toml         # Project configuration\n\u251c\u2500\u2500 uv.lock               # Dependency lock file\n\u251c\u2500\u2500 README.md             # Main documentation\n\u2514\u2500\u2500 CHANGELOG.md          # Release notes\n</code></pre>"},{"location":"developer-guide/#contributing","title":"Contributing","text":"<ol> <li>Fork the repository at https://github.com/james-see/beatstoch</li> <li>Create a feature branch: <code>git checkout -b feature/amazing-feature</code></li> <li>Make your changes</li> <li>Add tests if applicable</li> <li>Run the test suite: <code>uv run python -m pytest</code></li> <li>Commit your changes: <code>git commit -m 'Add amazing feature'</code></li> <li>Push to the branch: <code>git push origin feature/amazing-feature</code></li> <li>Open a Pull Request</li> </ol>"},{"location":"developer-guide/#testing","title":"Testing","text":"<pre><code># Run all tests\nuv run python -m pytest\n\n# Run with coverage\nuv run python -m pytest --cov=src/beatstoch\n\n# Run specific test file\nuv run python -m pytest tests/test_specific.py\n</code></pre>"},{"location":"developer-guide/#code-quality","title":"Code Quality","text":"<ul> <li>Follow PEP 8 style guidelines</li> <li>Add docstrings to public functions/classes</li> <li>Keep functions focused and reasonably sized</li> <li>Add type hints where appropriate</li> </ul>"},{"location":"developer-guide/#documentation","title":"Documentation","text":"<p>Documentation is built using MkDocs and hosted on GitHub Pages.</p> <p>To update documentation: 1. Edit files in the <code>docs/</code> directory 2. Preview locally: <code>mkdocs serve</code> 3. Changes are automatically deployed via GitHub Actions</p>"},{"location":"developer-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"developer-guide/#common-issues","title":"Common Issues","text":"<p>BPM Database Connection Issues: - Ensure internet connection is available - Check if bpmdatabase.com is accessible - The fallback search.asp endpoint may not exist</p> <p>MIDI Generation Issues: - Ensure mido library is properly installed - Check that tempo messages are MetaMessage type (not Message)</p> <p>PyPI Upload Issues: - Verify PYPI_API_TOKEN is correctly set in GitHub secrets - Ensure package name <code>beatstoch</code> is available or owned by you - Check that all dependencies are properly specified</p>"},{"location":"developer-guide/#getting-help","title":"Getting Help","text":"<ul> <li>Check existing issues on GitHub</li> <li>Create a new issue with detailed information</li> <li>Include error messages, Python version, and steps to reproduce</li> </ul>"},{"location":"user-guide/","title":"User Guide","text":"<p>Complete guide for using beatstoch to generate drum patterns.</p>"},{"location":"user-guide/#installation","title":"Installation","text":""},{"location":"user-guide/#using-pip-recommended","title":"Using pip (recommended)","text":"<pre><code>pip install beatstoch\n</code></pre>"},{"location":"user-guide/#using-uv","title":"Using uv","text":"<pre><code>uv add beatstoch\n</code></pre>"},{"location":"user-guide/#development-installation","title":"Development Installation","text":"<pre><code>git clone &lt;repository-url&gt;\ncd beatstoch\nuv sync\n</code></pre>"},{"location":"user-guide/#command-line-interface","title":"Command Line Interface","text":""},{"location":"user-guide/#basic-usage","title":"Basic Usage","text":""},{"location":"user-guide/#generate-from-song-title","title":"Generate from Song Title","text":"<pre><code># Simple usage - just song title\nbeatstoch generate \"Billie Jean\"\n\n# With artist for better BPM accuracy\nbeatstoch generate \"1979\" --artist \"Smashing Pumpkins\"\n\n# Custom number of bars\nbeatstoch generate \"Around the World\" --artist \"Daft Punk\" --bars 16\n</code></pre>"},{"location":"user-guide/#generate-with-explicit-bpm","title":"Generate with Explicit BPM","text":"<pre><code># House style at 128 BPM\nbeatstoch generate-bpm 128 --style house --bars 8\n\n# Breaks style with custom settings\nbeatstoch generate-bpm 174 --style breaks --bars 32 --swing 0.15 --intensity 0.8\n</code></pre>"},{"location":"user-guide/#all-command-line-options","title":"All Command Line Options","text":""},{"location":"user-guide/#generate-command-song-lookup","title":"<code>generate</code> Command (Song Lookup)","text":"<pre><code>beatstoch generate [OPTIONS] TITLE\n\nOptions:\n  --artist TEXT          Artist name (improves BPM lookup accuracy)\n  --bars INTEGER         Number of bars to generate (default: 8)\n  --style [house|breaks|generic]  Drum style (default: house)\n  --steps-per-beat INTEGER        Resolution (default: 4)\n  --swing FLOAT          Swing amount 0.0-1.0 (default: 0.10)\n  --intensity FLOAT      Pattern density 0.0-1.0 (default: 0.9)\n  --seed INTEGER         Random seed for reproducible patterns\n  --fallback-bpm FLOAT   BPM to use if lookup fails\n  --verbose             Show BPM lookup details\n  -h, --help            Show this message and exit\n</code></pre>"},{"location":"user-guide/#generate-bpm-command-explicit-bpm","title":"<code>generate-bpm</code> Command (Explicit BPM)","text":"<pre><code>beatstoch generate-bpm [OPTIONS] BPM\n\nOptions:\n  --bars INTEGER         Number of bars (default: 8)\n  --style [house|breaks|generic]  Drum style (default: house)\n  --steps-per-beat INTEGER        Resolution (default: 4)\n  --swing FLOAT          Swing amount (default: 0.10)\n  --intensity FLOAT      Pattern density (default: 0.9)\n  --seed INTEGER         Random seed\n  -h, --help            Show this message and exit\n</code></pre>"},{"location":"user-guide/#python-library","title":"Python Library","text":""},{"location":"user-guide/#basic-usage_1","title":"Basic Usage","text":"<pre><code>from beatstoch import generate_from_song, generate_stochastic_pattern\n\n# Generate from song lookup\nmidi_file, bpm = generate_from_song(\"1979\", artist=\"Smashing Pumpkins\")\nprint(f\"Found BPM: {bpm}\")\nmidi_file.save(\"drums.mid\")\n\n# Generate with explicit BPM\nmidi_file = generate_stochastic_pattern(bpm=127, bars=8, style=\"house\")\nmidi_file.save(\"house_drums.mid\")\n</code></pre>"},{"location":"user-guide/#advanced-usage","title":"Advanced Usage","text":"<pre><code>from beatstoch import generate_from_song, generate_stochastic_pattern\n\n# Song lookup with full customization\nmidi_file, bpm = generate_from_song(\n    song_title=\"Billie Jean\",\n    artist=\"Michael Jackson\",\n    bars=16,                    # 16 bars long\n    style=\"breaks\",             # Breakbeat style\n    steps_per_beat=4,           # 16th note resolution\n    swing=0.12,                 # Light swing\n    intensity=0.85,             # Dense pattern\n    seed=42,                    # Reproducible\n    fallback_bpm=120            # Fallback if lookup fails\n)\n\n# Explicit BPM with full control\nmidi_file = generate_stochastic_pattern(\n    bpm=174,\n    bars=32,\n    meter=(4, 4),               # Time signature\n    steps_per_beat=8,           # 32nd note resolution\n    swing=0.08,                 # Subtle swing\n    intensity=0.7,              # Sparse pattern\n    seed=123,\n    style=\"generic\"             # All-purpose style\n)\n\nmidi_file.save(\"complex_pattern.mid\")\n</code></pre>"},{"location":"user-guide/#function-signatures","title":"Function Signatures","text":""},{"location":"user-guide/#generate_from_song","title":"<code>generate_from_song()</code>","text":"<pre><code>generate_from_song(\n    song_title: str,\n    artist: Optional[str] = None,\n    bars: int = 8,\n    style: str = \"house\",\n    steps_per_beat: int = 4,\n    swing: float = 0.10,\n    intensity: float = 0.9,\n    seed: Optional[int] = None,\n    fallback_bpm: Optional[float] = None,\n    verbose: bool = False,\n) -&gt; Tuple[MidiFile, float]\n</code></pre> <p>Returns: Tuple of (MIDI file object, detected BPM)</p>"},{"location":"user-guide/#generate_stochastic_pattern","title":"<code>generate_stochastic_pattern()</code>","text":"<pre><code>generate_stochastic_pattern(\n    bpm: float,\n    bars: int = 4,\n    meter: Tuple[int, int] = (4, 4),\n    steps_per_beat: int = 4,\n    swing: float = 0.12,\n    intensity: float = 0.9,\n    seed: int = 42,\n    style: str = \"house\",\n) -&gt; MidiFile\n</code></pre> <p>Returns: MIDI file object</p>"},{"location":"user-guide/#drum-styles","title":"Drum Styles","text":""},{"location":"user-guide/#house-style","title":"House Style","text":"<ul> <li>Classic four-on-the-floor kick pattern</li> <li>Steady hi-hats with predictable openings</li> <li>Reliable snares on beats 2 and 4</li> <li>Best for: House, techno, minimal</li> </ul>"},{"location":"user-guide/#breaks-style","title":"Breaks Style","text":"<ul> <li>Complex kick patterns with consistent timing</li> <li>Predictable snare placement</li> <li>Steady syncopated hi-hat patterns</li> <li>Best for: Breakbeat, drum &amp; bass, hip-hop</li> </ul>"},{"location":"user-guide/#generic-style","title":"Generic Style","text":"<ul> <li>Balanced, all-purpose patterns</li> <li>Moderate complexity with predictable timing</li> <li>Works well across genres</li> <li>Best for: General use, experimentation</li> </ul>"},{"location":"user-guide/#output-files","title":"Output Files","text":"<p>Generated MIDI files use descriptive naming: - <code>stoch_[artist]_[title]_[bpm]bpm.mid</code> (from song lookup) - <code>stoch_[bpm]bpm.mid</code> (from explicit BPM)</p> <p>Files are standard MIDI format compatible with: - Ableton Live - FL Studio - Logic Pro - Pro Tools - Any MIDI-compatible software</p>"},{"location":"user-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/#bpm-lookup-issues","title":"BPM Lookup Issues","text":"<ul> <li>Ensure internet connection is available</li> <li>Some songs may not be in the BPM database</li> <li>Use <code>--fallback-bpm</code> to specify a default BPM</li> <li>Enable <code>--verbose</code> to see lookup process</li> </ul>"},{"location":"user-guide/#midi-issues","title":"MIDI Issues","text":"<ul> <li>Ensure you have a MIDI player or DAW installed</li> <li>Files are standard MIDI format 1</li> <li>Import into any DAW as MIDI tracks</li> </ul>"},{"location":"user-guide/#common-errors","title":"Common Errors","text":"<p><pre><code>BPM lookup failed and no fallback BPM provided\n</code></pre> - Add <code>--fallback-bpm 120</code> or similar</p> <p><pre><code>network error querying BPMDatabase\n</code></pre> - Check internet connection - BPM Database website may be temporarily unavailable</p>"},{"location":"user-guide/#examples-by-genre","title":"Examples by Genre","text":""},{"location":"user-guide/#electronichouse","title":"Electronic/House","text":"<pre><code>beatstoch generate-bpm 128 --style house --bars 32 --intensity 0.8\n</code></pre>"},{"location":"user-guide/#hip-hoptrap","title":"Hip-Hop/Trap","text":"<pre><code>beatstoch generate-bpm 140 --style breaks --bars 16 --swing 0.15 --intensity 0.6\n</code></pre>"},{"location":"user-guide/#drum-bass","title":"Drum &amp; Bass","text":"<pre><code>beatstoch generate-bpm 174 --style breaks --bars 64 --swing 0.08 --intensity 0.9\n</code></pre>"},{"location":"user-guide/#general-purpose","title":"General Purpose","text":"<pre><code>beatstoch generate \"Your Favorite Song\" --artist \"Artist Name\" --bars 8\n</code></pre>"}]}